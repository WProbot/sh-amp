#!/bin/bash
#
# Download and run the latest release version.
# https://github.com/w3src/sh-amp
#
# Usage
# git clone https://github.com/w3src/sh-amp.git
# cd sh-amp
# chmod +x ./ubuntu/18.04/vsftpd/config.sh
# ./ubuntu/18.04/vsftpd/config.sh

# Work even if somebody does "sh thisscript.sh".
set -e

# Set constants in the file.
ENVPATH=""
ABSPATH=""
DIRNAME=""
OS_PATH=""
PKGNAME=""

# Set the arguments of the file.
for arg in "${@}"; do
  case "${arg}" in
  --ENVPATH=*)
    ENVPATH="$(echo "${arg}" | sed -E 's/(--ENVPATH=)//')"
    ;;
  --ABSPATH=*)
    ABSPATH="$(echo "${arg}" | sed -E 's/(--ABSPATH=)//')"
    DIRNAME="$(dirname "${ABSPATH}")"
    OS_PATH="$(dirname "${DIRNAME}")"
    PKGNAME="$(basename "${DIRNAME,,}")"
    ;;
  esac
done

# Include the file.
source "${OS_PATH}/utils.sh"
source "${OS_PATH}/functions.sh"
source "${DIRNAME}/functions.sh"

# Make sure the package is installed.
pkgAudit "${PKGNAME}"

# Import variables from the env file.
PUBLIC_IP="$(getPkgCnf -rs="\[HOSTS\]" -fs="=" -s="PUBLIC_IP")"

echo
echo "Start setting up ${PKGNAME} configuration."

f_conf="/etc/vsftpd.conf"

if [ -f ".${f_conf}" ]; then
  cp ".${f_conf}" "${f_conf}"
else

  # Added dynamic variable in template file.
  if [ -z "$(cat "${f_conf}" | grep 'This is a configuration dynamically generated by Amp Stack.')" ]; then
    cat >>"${f_conf}" <<VSFTPDCONFSCRIPT
$(cat tmpl/dynamic.conf)
VSFTPDCONFSCRIPT
  else
  addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
$(cat tmpl/dynamic.conf)
<<HERE"
  fi

  addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
$(cat tmpl/vsftpd.conf)
<<HERE"

  addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
pasv_address=${PUBLIC_IP}
<<HERE"

  # Import variables from the env file.
  VSFTPD_SSL="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SSL")"

  # Securing Transmissions with SSL/TLS
  if [ "${VSFTPD_SSL}" == "YES" ]; then

    f_pem="/etc/ssl/private/vsftpd.pem"

    if [ -f "${f_pem}" ]; then
      echo "The ${f_pem} file already exists."
      msgYn="$(msg -yn 'Do you want to overwrite? (y/n) ')"
      if [ "${msgYn}" == "Yes" ]; then
        msgYnc="$(msg -ync 'Are you sure you want to save the changes? (y/n/c) ')"
        if [ "${msgYnc}" == "Yes" ]; then
          openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout "${f_pem}" -out "${f_pem}"
          chmod 600 "${f_pem}"          
        fi
      fi
    else
      openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout "${f_pem}" -out "${f_pem}"
      chmod 600 "${f_pem}"
    fi

    addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
$(cat tmpl/vsftpd-ssl.conf)
<<HERE"

    addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
rsa_cert_file=${f_pem}
rsa_private_key_file=${f_pem}
<<HERE"

  else

    addPkgCnf -f="${f_conf}" -fs="=" -o="<<HERE
$(cat tmpl/vsftpd.conf)
<<HERE"

  fi

fi

# Import variables from the env file.
VSFTPD_SHELL_ACCESS="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SHELL_ACCESS")"

# Disabling Shell Access
if [ "${VSFTPD_SHELL_ACCESS}" != "YES" ]; then

  f_ftponly="/bin/ftponly"

  if [ -f ".${f_ftponly}" ]; then
    cp ".${f_ftponly}" "${f_ftponly}"
  else
    cat >"${f_ftponly}" <<FTPONLYSCRIPT
#!/bin/sh
echo "This account is limited to FTP access only."
FTPONLYSCRIPT
  fi

  chmod a+x "${f_ftponly}"

  if [ -z "$(cat "/etc/shells" | egrep "^\/bin\/ftponly$")" ]; then
    echo "${f_ftponly}" | sudo tee -a /etc/shells
  fi

fi

# Restart the service.
systemctl restart vsftpd

echo
echo "${PKGNAME^} configuration is complete."
