#!/bin/bash
#
# Download and run the latest release version.
# https://github.com/w3src/sh-amp
#
# Usage
# git clone https://github.com/w3src/sh-amp.git
# cd sh-amp
# chmod +x ./ubuntu/18.04/vsftpd/config.sh
# ./ubuntu/18.04/vsftpd/config.sh

# Work even if somebody does "sh thisscript.sh".
set -e

# Set constants in the file.
ENVPATH=""
ABSPATH=""
OS_PATH=""

# Set the arguments of the file.
for arg in "${@}"; do
  case "${arg}" in
  --ENVPATH=*)
    ENVPATH="$(echo "${arg}" | sed -E 's/(--ENVPATH=)//')"
    ;;
  --ABSPATH=*)
    ABSPATH="$(echo "${arg}" | sed -E 's/(--ABSPATH=)//')"
    OS_PATH="$(dirname "$(dirname "${ABSPATH}")")"
    ;;
  esac
done

# Include the file.
source "${OS_PATH}/utils.sh"
source "${OS_PATH}/functions.sh"
source "functions.sh"

# Make sure the package is installed.
pkgAudit "vsftpd"

# Import variables from the env file.
PUBLIC_IP="$(getPkgCnf -rs="\[HOSTS\]" -fs="=" -s="PUBLIC_IP")"

echo
echo "Start setting up vsftpd configuration."

f1="/etc/vsftpd.conf"
if [ -f ".${f1}" ]; then
  cp ".${f1}" "${f1}"
else
  if [ -z "$(cat "${f1}" | grep 'This is a configuration dynamically generated by Amp Stack.')" ]; then
    cat >>"${f1}" <<VSFTPDCONFSCRIPT
#
# This is a configuration dynamically generated by Amp Stack.
#
# Chroot Jail
# To prevent the FTP users to access any files outside of their home directories uncomment the chroot setting.
# 500 OOPS: vsftpd: refusing to run with writable root inside chroot()
allow_writeable_chroot=YES
#
# Since Linux doesnâ€™t show files beginning with a dot, files like .htaccess will not be visible in FTP.
# To force vsftpd to show file names that begin with a dot.
force_dot_files=YES
#
# Add some port ranges for passive FTP to make sure enough connections are available.
pasv_enable=YES
pasv_min_port=12000
pasv_max_port=12100
pasv_address=0.0.0.0/0
#
# Limiting User Login
# vsftpd will load a list of usernames, from the filename given by userlist_file
userlist_enable=YES
userlist_file=/etc/vsftpd.user_list
userlist_deny=NO
# 
# To allow anonymous users to use SSL
#allow_anon_ssl=NO
#
# To force anonymous users to use SSL
#force_anon_data_ssl=NO
#force_anon_logins_ssl=NO
#
# To force local users to use SSL
#force_local_data_ssl=YES
#force_local_logins_ssl=YES
#
# Permit TLS v1 protocol connections. TLS v1 connections are preferred
#ssl_tlsv1=YES
#ssl_sslv2=NO
#ssl_sslv3=NO
#
# Uncomment ssl_request_cert option if SSL/TLS connection is used by IBM's zOS ftp client
# read man vsftpd.conf for further information
#ssl_request_cert=NO
#require_ssl_reuse=NO
#
# We will need high encrypted cipher suites meaning that the key lengths will be 128 bits or more
#ssl_ciphers=HIGH
#
# This is the last line of configuration dynamically generated by Amp Stack.
VSFTPDCONFSCRIPT
  fi

  addPkgCnf -f="${f1}" -fs="=" -o="<<HERE
listen=YES
listen_ipv6=NO
anonymous_enable=NO
local_enable=YES
write_enable=YES
local_umask=002
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_file=/var/log/vsftpd.log
chroot_local_user=YES
chroot_list_enable=YES
chroot_list_file=/etc/vsftpd.chroot_list
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO
allow_writeable_chroot=YES
force_dot_files=YES
pasv_enable=YES
pasv_min_port=12000
pasv_max_port=12100
pasv_address=${PUBLIC_IP}
userlist_enable=YES
userlist_file=/etc/vsftpd.user_list
userlist_deny=NO
<<HERE"

  # Import variables from the env file.
  VSFTPD_SSL="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SSL")"

  # Securing Transmissions with SSL/TLS
  if [ "${VSFTPD_SSL}" == "YES" ]; then

    openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem
    chmod 600 /etc/ssl/private/vsftpd.pem

    addPkgCnf -f="${f1}" -fs="=" -o="<<HERE
rsa_cert_file=/etc/ssl/private/vsftpd.pem
rsa_private_key_file=/etc/ssl/private/vsftpd.pem
ssl_enable=YES
allow_anon_ssl=YES
force_anon_data_ssl=YES
force_anon_logins_ssl=YES
force_local_data_ssl=YES
force_local_logins_ssl=YES
ssl_tlsv1=YES
ssl_sslv2=NO
ssl_sslv3=NO
ssl_request_cert=NO
require_ssl_reuse=NO
ssl_ciphers=HIGH
<<HERE"

  else

    addPkgCnf -f="${f1}" -fs="=" -o="<<HERE
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO
#allow_anon_ssl=NO
#force_anon_data_ssl=NO
#force_anon_logins_ssl=NO
#force_local_data_ssl=YES
#force_local_logins_ssl=YES
#ssl_tlsv1=YES
#ssl_sslv2=NO
#ssl_sslv3=NO
#ssl_request_cert=NO
#require_ssl_reuse=NO
#ssl_ciphers=HIGH
<<HERE"

  fi

fi

# Import variables from the env file.
VSFTPD_SHELL_ACCESS="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SHELL_ACCESS")"

# Disabling Shell Access
if [ "${VSFTPD_SHELL_ACCESS}" != "YES" ]; then

  f2="/bin/ftponly"

  if [ -f ".${f2}" ]; then
    cp ".${f2}" "${f2}"
  else
    cat >"${f2}" <<FTPONLYSCRIPT
#!/bin/sh
echo "This account is limited to FTP access only."
FTPONLYSCRIPT
  fi

  chmod a+x "${f2}"

  if [ -z "$(cat "/etc/shells" | egrep "^\/bin\/ftponly$")" ]; then
    echo "${f2}" | sudo tee -a /etc/shells
  fi

fi

# Restart the service.
systemctl restart vsftpd

echo
echo "Vsftpd configuration is complete."
